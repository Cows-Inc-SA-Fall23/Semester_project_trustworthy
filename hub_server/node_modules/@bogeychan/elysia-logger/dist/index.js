import pino from 'pino';
import { Elysia } from 'elysia';
import { formatters, serializers } from './config';
export function logger(options = {}) {
    return plugin(options);
}
export function fileLogger(options) {
    return plugin(options);
}
export function createPinoLogger(options = {}) {
    const log = createPinoLoggerInternal(options);
    log.into = into.bind(log);
    return log;
}
function createPinoLoggerInternal(options) {
    options.level ??= 'info';
    options.formatters ??= formatters;
    options.serializers ??= serializers;
    const streamOptions = options;
    if ('file' in options) {
        streamOptions.stream = pino.destination(options.file);
        delete options.file;
    }
    return pino(options, streamOptions.stream);
}
function into(options = {}) {
    const autoLogging = options.autoLogging ?? true;
    delete options.autoLogging;
    let log;
    let app = new Elysia({
        name: '@bogeychan/elysia-logger',
        seed: options
    }).derive((ctx) => {
        log =
            typeof options.customProps === 'function'
                ? this.child(options.customProps(ctx))
                : this;
        return { log };
    });
    if (autoLogging) {
        app = app
            .onRequest((ctx) => {
            ctx.store = { ...ctx.store, startTime: performance.now() };
        })
            .onResponse((ctx) => {
            if (log.level == 'silent') {
                return;
            }
            if (typeof autoLogging == 'object' && autoLogging.ignore(ctx)) {
                return;
            }
            ctx.store.startTime ??= 0;
            ctx.store.endTime = performance.now();
            ctx.store.responseTime = ctx.store.endTime - ctx.store.startTime;
            log.info(ctx);
        });
    }
    return app;
}
const plugin = (options) => into.bind(createPinoLoggerInternal(options))(options);
export * from './config';
export { pino } from 'pino';

/// <reference types="node" />
import type { pino } from 'pino';
import type { Context, DecoratorBase, Elysia } from 'elysia';
export interface StreamLoggerOptions extends BaseLoggerOptions {
    stream?: pino.DestinationStream;
}
export interface ElysiaStreamLoggerOptions extends StreamLoggerOptions, ElysiaLoggerOptions {
}
export interface FileLoggerOptions extends BaseLoggerOptions {
    file: string | number | pino.DestinationStream | NodeJS.WritableStream;
}
export interface ElysiaFileLoggerOptions extends FileLoggerOptions, ElysiaLoggerOptions {
}
export type StandaloneLoggerOptions = StreamLoggerOptions | FileLoggerOptions;
export type LoggerOptions = StandaloneLoggerOptions & ElysiaLoggerOptions;
export type ElysiaLoggerOptions = {
    customProps?: <Instance extends Elysia>(ctx: InferContext<Instance>) => object;
    autoLogging?: boolean | {
        ignore: (ctx: Context) => boolean;
    };
};
export interface ElysiaLogger<E extends Elysia = Elysia> extends Logger {
    into(options?: _INTERNAL_ElysiaLoggerPluginAutoLoggingEnabledOptions<ElysiaLoggerOptions>): _INTERNAL_ElysiaLoggerPlugin<_INTERNAL_ElysiaLoggerPluginAutoLoggingState>;
    into(options?: _INTERNAL_ElysiaLoggerPluginAutoLoggingDisabledOptions<ElysiaLoggerOptions>): _INTERNAL_ElysiaLoggerPlugin;
    into(options?: ElysiaLoggerOptions): E;
}
interface BaseLoggerOptions extends pino.LoggerOptions {
}
export type Logger = pino.Logger & BaseLoggerOptions;
export type InferContext<T extends Elysia> = T extends Elysia<infer Path, infer Decorators, infer _Definitions, infer _ParentSchema, infer Routes> ? Context<Routes, DecoratorBase, Path> & Partial<Decorators['request']> : never;
export type _INTERNAL_Writeonly<T> = {
    -readonly [P in keyof T]: T[P];
};
export type _INTERNAL_ElysiaLoggerPluginAutoLoggingState = {
    readonly startTime?: number;
    readonly endTime?: number;
    readonly responseTime?: number;
};
export type _INTERNAL_ElysiaLoggerPlugin<Store extends Elysia['store'] = Elysia['store']> = Elysia<'', {
    request: {};
    store: Store;
    derive: {
        log: Logger;
    };
    resolve: {};
}>;
export type _INTERNAL_ElysiaLoggerPluginAutoLoggingEnabledOptions<Options extends BaseLoggerOptions & ElysiaLoggerOptions> = Omit<Options, 'autoLogging'> & {
    autoLogging?: true | {
        ignore: (ctx: Context) => boolean;
    };
};
export type _INTERNAL_ElysiaLoggerPluginAutoLoggingDisabledOptions<Options extends BaseLoggerOptions & ElysiaLoggerOptions> = Omit<Options, 'autoLogging'> & {
    autoLogging: false;
};
export {};
